{#- Modal form for submitting a resource template with user instructions -#}
<div>
  <form id="resource-template-form" class="resource-template-form" hx-post="/api/{name}/templates/messages" hx-target="#resource-proxy" hx-swap="innerHTML" hx-ext="json-enc">
    <input type="hidden" name="uri" value="{{ template.uriTemplate }}">
    <h2 class="form-title">{{ template.name }}</h2>
    {%- if template.description %}
      <p class="form-description">{{ template.description }}</p>
    {%- endif %}
    
    {%- if template.uriTemplate %}
      <p class="uri-template-info">URI Template: {{ template.uriTemplate }}</p>
      
      {#- Generate form fields for URI parameters extracted in Python -#}
      <div class="uri-params-container">
        <h3 class="uri-params-title">URI Parameters</h3>
        {%- if uri_params and uri_params|length > 0 %}
          {%- for param in uri_params %}
            <div class="param-field">
              <label 
                for="param-{{ param.name }}" 
                class="param-label"
              >
                {{ param.name }}
                {%- if not param.required %}<span class="param-optional"> (optional)</span>{%- endif %}
              </label>
              <input 
                id="param-{{ param.name }}"
                type="text" 
                name="{{ param.name }}" 
                class="param-input" 
                placeholder="Enter {{ param.name }}..." 
                {%- if param.required %} required{%- endif %}
              />
            </div>
          {%- endfor %}
        {%- else %}
          <p class="no-params-message">No URI parameters required</p>
        {%- endif %}
      </div>
    {%- endif %}
    
    <div class="instructions-container">
      <label for="instructions" class="instructions-label">Instructions for the AI agent</label>
      <textarea id="instructions" name="instructions" class="instructions-textarea" rows="3" placeholder="e.g. Summarize the PR comments and contributors..."></textarea>
    </div>
    
    {%- if template.arguments and template.arguments|length > 0 %}
      <div class="additional-params-container">
        <h3 class="additional-params-title">Additional Parameters</h3>
        {%- for arg in template.arguments %}
          <div class="arg-field">
            <label for="arg-{{ arg.name }}" class="arg-label">{{ arg.name }}</label>
            <input id="arg-{{ arg.name }}" type="text" name="{{ arg.name }}" class="arg-input" placeholder="{{ arg.description or arg.name }}" />
          </div>
        {%- endfor %}
      </div>
    {%- endif %}
    <div class="button-container">
      <button type="button" class="btn-cancel" onclick="document.getElementById('template-form-modal').classList.add('hidden')">Cancel</button>
      <button type="submit" class="btn-submit" onclick="updateResourceUri();">Submit</button>
    </div>
  </form>
  
  <div id="resource-proxy" class="resource-proxy"></div>
  
  <script>
    document.body.addEventListener('htmx:afterSwap', function(evt) {
      if (evt.detail.target && evt.detail.target.id === "resource-proxy") {
        const promptText = evt.detail.target.textContent.trim();
        const modal = document.getElementById('template-form-modal');
        if (modal) modal.classList.add('hidden');
        
        if (promptText) {
          // Create user bubble for the request
          const form = document.getElementById('resource-template-form');
          const uri = form.querySelector('input[name="uri"]').value;
          const instructions = form.querySelector('#instructions').value || "";
          
          const chatResp = document.getElementById("chat-response");
          const userDiv = document.createElement("div");
          userDiv.className = "chat-bubble-user";
          userDiv.innerText = promptText;
          chatResp.appendChild(userDiv);
          
          // Now fetch the bot response by sending the prompt to the chat API
          fetch('/api/{name}/invoke', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({prompt: promptText})
          })
          .then(r => r.text())
          .then(html => {
            document.querySelector("#chat-response").insertAdjacentHTML("beforeend", html);
            
            // Scroll to the bottom of the chat
            const chatContainer = document.getElementById('chat-container');
            if (chatContainer) {
              chatContainer.scrollTop = chatContainer.scrollHeight;
            }
          });
        }
        
        // Clear the proxy content
        evt.detail.target.textContent = "";
      }
    });
  </script>

  <script>
    function updateResourceUri() {
      // Get the template URI
      const form = document.getElementById('resource-template-form');
      const uriField = form.querySelector('input[name="uri"]');
      let uri = uriField.value;
      
      // Find all parameter input fields
      const inputs = form.querySelectorAll('input[type="text"]');
      
      // Replace template parameters with values
      inputs.forEach(input => {
        // Skip the instructions field
        if (input.name === 'instructions') return;
        
        // Create the parameter placeholder pattern
        const placeholder = '{' + input.name + '}';
        const placeholderOptional = '{/' + input.name + '*}';
        const placeholderOptional2 = '{' + input.name + '?}';
        
        // Replace in URI if the field has a value
        if (input.value) {
          if (uri.includes(placeholderOptional)) {
            // For optional path parameters like {/path*}
            uri = uri.replace(placeholderOptional, '/' + input.value);
          } else if (uri.includes(placeholderOptional2)) {
            // For optional parameters like {param?}
            uri = uri.replace(placeholderOptional2, input.value);
          } else {
            // For required parameters
            uri = uri.replace(placeholder, input.value);
          }
        } else {
          // If no value provided for optional params, remove them
          if (uri.includes(placeholderOptional)) {
            uri = uri.replace(placeholderOptional, '');
          } else if (uri.includes(placeholderOptional2)) {
            uri = uri.replace(placeholderOptional2, '');
          }
        }
      });
      
      // Update the hidden URI field
      uriField.value = uri;
    }
  </script>
</div>
